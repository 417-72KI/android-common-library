class SemanticVersion {
    int major
    int minor
    int patch
    String preRelease
    String metadata

    private SemanticVersion(int major, int minor, int patch, String preRelease, String metadata) {
        this.major = major
        this.minor = minor
        this.patch = patch
        this.preRelease = preRelease
        this.metadata = metadata
    }

    static def initial = new SemanticVersion(0, 0, 0, 'SNAPSHOT', null)

    static def from(String str) {
        // https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
        def matcher = str =~ /^v?(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$/
        assert matcher.groupCount() == 5
        if (matcher.size() == 0) {
            return null
        }
        return new SemanticVersion(matcher[0][1] as int, matcher[0][2] as int, matcher[0][3] as int, matcher[0][4] as String, matcher[0][5] as String)
    }

    @Override
    String toString() {
        def version = "${major}.${minor}.${patch}"
        if (preRelease != null && !preRelease.isEmpty()) {
            version += "-${preRelease}"
        }
        if (metadata != null && !metadata.isEmpty()) {
            version += "+${metadata}"
        }
        return version
    }
}

def createVersion = {
    ['sh', '-c', 'git fetch --tags'].execute().waitFor()
    def versionString = ['sh', '-c', 'git describe --tags --always --first-parent'].execute().text.trim()
    def version = SemanticVersion.from(versionString) ?: SemanticVersion.initial
    if (version.preRelease) {
        def nextMajor = project.properties['nextVersion.major'] as Integer
        def nextMinor = project.properties['nextVersion.minor'] as Integer
        if (nextMajor != null && nextMajor > version.major) {
            version.major = nextMajor
        } else if (nextMinor != null && nextMinor > version.minor) {
            version.minor = nextMinor
        } else {
            version.patch += 1
        }
        version.preRelease = 'SNAPSHOT'
    }
    return version.toString()
}

project.ext.describedVersion = createVersion()

task printVersion {
    doLast {
        println createVersion()
    }
}

task createTagFromVersion {
    doFirst {
        if (['sh', '-c', 'git symbolic-ref --short HEAD'].execute().text.trim() != 'main') {
            throw new GradleException('This task must be run in main branch')
        }
        ['sh', '-c', 'git fetch --tags'].execute().waitFor()
    }
    doLast {
        def version = createVersion().replaceFirst(/-SNAPSHOT/, "")
        if (!version.startsWith('v')) {
            version = "v${version}"
        }
        def versionList = ['sh', '-c', 'git tag'].execute().text.trim().split('\n')
        if(versionList.contains(version)) {
            throw new GradleException("`${version}` already exists.")
        }
        println "set tag for `${version}`"

        def retValue = ['sh', '-c', "git tag ${version} main"].execute().waitFor()
        if (retValue != 0) {
            throw new GradleException("invalid return code on `git tag`: ${retValue}")
        }
        retValue = ['sh', '-c', "git push origin ${version}"].execute().waitFor()
        if (retValue != 0) {
            throw new GradleException("invalid return code on `git push`: ${retValue}")
        }
    }
}
